{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9; // wersja solidity\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror NotOwner();\r\n\r\n//837,297 gas\r\ncontract FundMe {\r\n    using PriceConverter for uint256;\r\n\r\n    // uint256 public number;\r\n    uint256 public constant minimumUsd = 50 * 1e18;\r\n\r\n    address[] public funders;\r\n    mapping(address => uint256) public addressToAmountFunded;\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress) {\r\n        owner = msg.sender;\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        // number = 5;\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= minimumUsd,\r\n            \"nie wyslano 1 ethera\"\r\n        ); // 1e18 == 1* 10 **18 == 1 etherium\r\n        // zwraca gaz jezeli sie nie wykona to co ponizej wiec nie zwaca za przypisanie 5 do number\r\n\r\n        funders.push(msg.sender);\r\n        addressToAmountFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    address public immutable owner;\r\n\r\n    function withdraw() public onlyOwner {\r\n        //for (start index, end index,step amount)\r\n        for (\r\n            uint256 funderIndex = 0;\r\n            funderIndex < funders.length;\r\n            funderIndex++\r\n        ) {\r\n            address funder = funders[funderIndex];\r\n            addressToAmountFunded[funder] = 0;\r\n        }\r\n        //reset the array\r\n        funders = new address[](0);\r\n\r\n        //transfer\r\n        // payable(msg.sender).transfer(address(this).balance);\r\n        //send\r\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\r\n        //  require(sendSuccess,\"send failed\");\r\n        //cal\r\n        (\r\n            bool callSuccess, /*bytes memory dataReturned*/\r\n\r\n        ) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(callSuccess, \"Call failed\");\r\n        revert();\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == owner,\"Sender is not owner\"); tez tak mozna\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n        _; // wykonuje reszte kodu funkcji do ktorej przypsiszesz\r\n    }\r\n\r\n    receive() external payable {\r\n        fund();\r\n    }\r\n\r\n    fallback() external payable {\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9; // wersja solidity\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        //ABI\r\n        //Address 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10); //1**10\r\n    }\r\n\r\n    function getVersion() internal view returns (uint256) {\r\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n            0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\r\n        );\r\n        return priceFeed.version();\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountUsd = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountUsd;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}